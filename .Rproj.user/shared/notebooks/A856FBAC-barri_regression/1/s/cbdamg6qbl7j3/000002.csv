"0","crossValidationCont = function(df,K,a,nperfmeas=6)"
"0","{ set.seed(123)"
"0","  n = nrow(df)"
"0","  nhold = round(n/K) # size of holdout set "
"0","  iperm = sample(n)"
"0","  perfmeas = matrix(0,K,nperfmeas)  "
"0","  models = vector(mode=""list"", length=3)"
"0","  for(k in 1:K)"
"0","  { indices = (((k-1)*nhold+1):(k*nhold))"
"0","    if( k==K ) indices = (((k-1)*nhold+1):n)"
"0","    indices = iperm[indices]"
"0","    train = df[-indices,]"
"0","    holdout = df[indices,]"
"0","    models[[k]] = lm(price~mark_cat+year+mileage_cat+log_vol_engine+fuel+car_type+gdpc,data=train)"
"0","    pred = predict(models[[k]],newdata=holdout,interval=""prediction"",level=a)"
"0","    RSS = c(crossprod(models[[k]]$residuals))"
"0","    MSE = RSS / length(models[[k]]$residuals)"
"0","    x = intervalScore(pred, holdout$price, a)"
"0","    y= sqrt(MSE)"
"0","    z = summary(models[[k]])$r.squared"
"0","    perfmeas[k,1:4] = x$summary"
"0","    perfmeas[k,5] = y"
"0","    perfmeas[k,6] = z"
"0","  }"
"0","  avgperfmeas = apply(perfmeas,2,mean)"
"0","  list(perfmeasbyfold=perfmeas, avgperfmeas=avgperfmeas, models= models)"
"0","}"

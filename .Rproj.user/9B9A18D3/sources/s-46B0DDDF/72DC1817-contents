library(dplyr)
library(magrittr) 
library(mlbench)
library(randomForest)
library(party)
library(rpart)
library(rpart.plot)
library(leaps)
library(tidyverse)
library(caret)
library(tibble)
library(pROC)
library(MLmetrics)

#Data read
credit = read.csv("~/Downloads/default_of_credit_card_clients.csv",header=T,skip=1) 
creditSubset = credit[seq(67,30000,5),] 
creditSubset = creditSubset[,-1]

#Transforming data using linear transformation
transform = function(dataset)
{ dataTransform = as_tibble(dataset) %>%
  dplyr::filter( education<=3 & marriage<=2 ) %>% 
  dplyr::mutate( logbillamt1=-1/(billamt1+100000), 
                 logbillamt2=-1/(billamt2+100000), 
                 logbillamt3=-1/(billamt3+100000), 
                 logbillamt4=-1/(billamt4+100000), 
                 logbillamt5=-1/(billamt5+100000), 
                 logbillamt6=-1/(billamt6+100000),
                 payamt1cbrt=log(payamt1+1), 
                 payamt2cbrt=log(payamt2+1), 
                 payamt3cbrt=log(payamt3+1),
                 payamt4cbrt=log(payamt4+1), 
                 payamt5cbrt=log(payamt5+1), 
                 payamt6cbrt=log(payamt6+1)) %>%
  dplyr::select( limitbal,sex,education,marriage,age, delay1,delay2,delay3,delay4,delay5,delay6,
                 logbillamt1,logbillamt2,logbillamt3,logbillamt4,logbillamt5,logbillamt6,
                 payamt1cbrt,payamt2cbrt,payamt3cbrt,payamt4cbrt,payamt5cbrt,payamt6cbrt,
                 idefault)
dataTransform
}

#Transforming data into bins
bin = function(dataset, iprint=T)
{ 
  wt=.4
  wtvec=wt^(1:6)  # Relative weight from previous month to 6-previous month
  w=wtvec/sum(wtvec) 
  dataTransform= as_tibble(dataset) %>%
    dplyr::filter( education<=3 & marriage<=2  )  %>% 
    dplyr::mutate( delayAvg= w[1]*delay1+w[2]*delay2+w[3]*delay3 +
                     w[4]*delay4+w[5]*delay5+w[6]*delay6,
                   billamtAvg= w[1]*billamt1+w[2]*billamt2+w[3]*billamt3 +
                     w[4]*billamt4+w[5]*billamt5+w[6]*billamt6,
                   payamtAvg= w[1]*payamt1+w[2]*payamt2+w[3]*payamt3 +
                     w[4]*payamt4+w[5]*payamt5+w[6]*payamt6 ) %>%
    dplyr::mutate( limitbalCateg=cut(limitbal,limitbalBreaks),
                   delayAvgCateg=cut(delayAvg,delayAvgBreaks),
                   billamtAvgCateg=cut(billamtAvg,billamtAvgBreaks),
                   payamtAvgCateg=cut(payamtAvg,payamtAvgBreaks)) %>%
    dplyr::select( limitbalCateg, delayAvgCateg, billamtAvgCateg, payamtAvgCateg, 
                   idefault, sex, education, marriage, age, delayAvg, billamtAvg, payamtAvg, limitbal)
  if(iprint)
  { attach(dataTransform)
    t1=table(idefault,limitbalCateg)
    t2=table(idefault,delayAvgCateg)
    t3=table(idefault,billamtAvgCateg)
    t4=table(idefault,payamtAvgCateg)
    print(table(limitbalCateg))
    print(table(delayAvgCateg))
    print(table(billamtAvgCateg))
    print(table(payamtAvgCateg))
    cat("Tables with idefault\n")
    print(round(t1/apply(t1,1,sum),3))
    print(round(t2/apply(t2,1,sum),3))
    print(round(t3/apply(t3,1,sum),3))
    print(round(t4/apply(t4,1,sum),3))
    Ordinal=data.frame(limitbalOrd=as.numeric(limitbalCateg),
                       delayAvgOrd=as.numeric(delayAvgCateg),
                       billamtAvgOrd=as.numeric(billamtAvgCateg),
                       payamtAvgOrd=as.numeric(payamtAvgCateg), 
                       sex=dataTransform$sex, idefault=dataTransform$idefault)
    cat("Spearman correlation matrix\n")
    corMat=cor(as.matrix(Ordinal),method="spearman")
    print(round(corMat,3))
    detach(dataTransform)
  }
  dataTransform
}

#Graphing the transformed data, and analysis of the transformed data
varnames0=names(creditSubset)
par(mfrow=c(4,3))
for (j in 12:17) { 
  hist(-1/(creditSubset[,j]+100000),xlab=paste("-1/(",varnames0[j],"+100000)"),main="")
}

for (j in 18:23) { 
  hist(log(creditSubset[,j]),xlab=paste("log(",varnames0[j],")"),main="") 
}

transform_credit = transform(creditSubset)
transform_credit$idefault = as.factor(transform_credit$idefault)
varnames=names(transform_credit)
dfTrain=as.data.frame(transform_credit)
par(mfrow=c(3,3))
for(j in 1:9)
{ 
  plot(factor(dfTrain$idefault),dfTrain[,j],xlab="idefault",ylab=varnames[j]) 
}
for(j in 10:18)
{ 
  plot(factor(dfTrain$idefault),dfTrain[,j],xlab="idefault",ylab=varnames[j]) 
}
for(j in 19:23)
{ 
  plot(factor(dfTrain$idefault),dfTrain[,j],xlab="idefault",ylab=varnames[j]) 
}
coryx=cor(creditSubset$idefault,creditSubset[,1:23],method="spearman")
print(round(coryx,2))

#Set up for the bins
limitbalBreaks=c(0,60000,150000,230000,2000000)
delayAvgBreaks=c(-3,-0.9,0.1,1,8)
billamtAvgBreaks=c(-400000,0,4000,18000,53000,2000000)
payamtAvgBreaks=c(-0.1,10,900,1700,3100,6800,2000000)

#Binning the data
bin_credit = bin(creditSubset, iprint=T)
bin_credit$idefault = as.factor(bin_credit$idefault)

levels(bin_credit$idefault) <- c("one", "zero")
levels(transform_credit$idefault) <- c("one", "zero")

#Cross-validation setup
set.seed(123)
train.control <- trainControl(method = "cv",
                              summaryFunction=multiClassSummary, 
                              classProbs=T,number = 3, savePredictions = T)

#Model fitting
logittrans <- train(idefault~  .,
                data = transform_credit,
                trControl = train.control,
                method = "glm",
                family=binomial(link="logit"))
logitbin <- train(idefault~ delayAvgCateg + limitbalCateg + billamtAvgCateg + payamtAvgCateg + sex + education + marriage + age +delayAvgCateg:sex + payamtAvgCateg:sex,
                  data = bin_credit,
                  trControl = train.control,
                  method = "glm",
                  family=binomial(link="logit"))

probittrans <- train(idefault~  .,
               data = transform_credit,
               trControl = train.control,
               method = "glm",
               family=binomial(link="probit"))
probitbin <- train(idefault~ delayAvgCateg + limitbalCateg + billamtAvgCateg + payamtAvgCateg + sex + education + marriage + age+delayAvgCateg:sex + payamtAvgCateg:sex,
                  data = bin_credit,
                  trControl = train.control,
                  method = "glm",
                  family=binomial(link="probit"))

cauchitrans <- train(idefault~.,
                   data = transform_credit,
                   trControl = train.control,
                   method = "glm",
                   family=binomial(link="cauchit"))
cauchitbin <- train(idefault~ delayAvgCateg + limitbalCateg + billamtAvgCateg + payamtAvgCateg + sex + education + marriage + age+delayAvgCateg:sex + payamtAvgCateg:sex,
                  data = bin_credit,
                  trControl = train.control,
                  method = "glm",
                  family=binomial(link="cauchit"))

cloglogtrans <- train(idefault~ .,
                   data = transform_credit,
                   trControl = train.control,
                   method = "glm",
                   family=binomial(link="cloglog"))
cloglogbin <- train(idefault~ delayAvgCateg + limitbalCateg + billamtAvgCateg + payamtAvgCateg + sex + education + marriage + age+delayAvgCateg:sex + payamtAvgCateg:sex,
                   data = bin_credit,
                   trControl = train.control,
                   method = "glm",
                   family=binomial(link="cloglog"))
ctreebin <- train(idefault~ delayAvg + limitbal + billamtAvg + payamtAvg + sex + education + marriage + age,
                    data = bin_credit,
                    trControl = train.control,
                    method = "rpart")
ctreetrans <- train(idefault~ .,
                      data = transform_credit,
                      trControl = train.control,
                      method = "rpart")

rfbin <- train(idefault~ delayAvg + limitbal + billamtAvg + payamtAvg + sex + education + marriage + age,
                  data = bin_credit,
                  trControl = train.control,
                  method = "rf")
rftrans <- train(idefault~ .,
                    data = transform_credit,
                    trControl = train.control,
                    method = "rf")

#Average accuracy of the models 
acc = c("logit trans" = logittrans$results$Accuracy,
        "logit bin" = logitbin$results$Accuracy,
        "probit trans" = probittrans$results$Accuracy,
        "probit bin" = probitbin$results$Accuracy,
        "cauchit trans" = logittrans$results$Accuracy,
        "cauchit bin" = logitbin$results$Accuracy,
        "cloglog trans" = cloglogtrans$results$Accuracy,
        "cloglog bin" = cloglogbin$results$Accuracy,
        "tree trans" = ctreetrans$results$Accuracy,
        "tree bin" = ctreebin$results$Accuracy,
        "random forest trans" = rftrans$results$Accuracy,
        "random forest bin" = rfbin$results$Accuracy)

#Average AUC of the models 
auc = c("logit trans" = logittrans$results$AUC,
        "logit bin" = logitbin$results$AUC,
        "probit trans" = probittrans$results$AUC,
        "probit bin" = probitbin$results$AUC,
        "cauchit trans" = logittrans$results$AUC,
        "cauchit bin" = logitbin$results$AUC,
        "cloglog trans" = cloglogtrans$results$AUC,
        "cloglog bin" = cloglogbin$results$AUC,
        "tree trans" = ctreetrans$results$AUC,
        "tree bin" = ctreebin$results$AUC,
        "random forest trans" = rftrans$results$AUC,
        "random forest bin" = rfbin$results$AUC)



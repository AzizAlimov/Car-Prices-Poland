---
title: "STAT 447b A3"
author: "Barrichello Noor (68448711)"
date: "3/6/2022"
output: pdf_document
---
# Setup
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
library(mlbench)
library(randomForest)
library(party)
library(rpart)
library(rpart.plot)
library(leaps)
library(VGAM)
library(quantregForest)
data("LetterRecognition")
```

# Parameter Assignnment
```{r}
chosenLetters = c("B", "F", "M")
train_split = 0.7
```


# Run the other functions first before running this chunk so that functions are defined
```{r, echo=TRUE}
data=subset(LetterRecognition,is.element(LetterRecognition$lettr, chosenLetters))
data = SplitData(train_split, data)
train = data$train
holdout = data$test
# Side-by-side boxplots
par(mfrow=c(4,4))
varn=names(train); 
varn=varn[-1]; 
nfeature=length(varn) 
for(j in 1:nfeature)
{ plot(train$lettr,train[,j+1],ylab=varn[j],xlab="letter") } 
# xbar, ybar, y2bar, xy2br, xegvy, y.ege, yegvx
# individually have some discrimination capability for 2 of 3 letters
models = ModelFit(train)
outpred = Prediction(models, holdout)
predint = CategoryPredIntervalHelper(holdout, chosenLetters, outpred)

print(table(holdout$lettr,predint$Multinomial$pred50))
print(table(holdout$lettr,predint$Tree$pred50))
print(table(holdout$lettr,predint$Forest$pred50))
print(table(holdout$lettr,predint$Multinomial$pred80))
print(table(holdout$lettr,predint$Tree$pred80))
print(table(holdout$lettr,predint$Forest$pred80))
```

# Data Work, Splitting data set into training and holdout sets
```{r}
SplitData = function(train_split,data)
{
  n=nrow(data)
  ntrain=floor(n*train_split)
  set.seed(447)
  itrain=sample(n,ntrain)
  train=data[itrain,]; 
  holdout=data[-itrain,]
  print(summary(train))
  varn=names(train); 
  varn=varn[-1]; 
  nfeature=length(varn) 
  
  lett=rep(chosenLetters[1],ntrain)
  for (letter in chosenLetters) {
    if (letter != chosenLetters[1]){
      lett[train$lettr==letter]=letter;
    }
  }
  lett=as.factor(lett); 
  train$lettr=lett
  
  letth=rep(chosenLetters[1],n-ntrain)
  for (letter in chosenLetters) {
    if (letter != chosenLetters[1]){
      letth[holdout$lettr==letter]=letter; 
    }
  }
  letth=as.factor(letth); 
  holdout$lettr=letth
  list(train=train, test=holdout)
}
```

# Fit models given data
```{r training-regression-holdout,warning=FALSE,echo=FALSE,message=FALSE, results='hide'}
ModelFit = function(data){
  # Fit binary regression models using glm function (2 letters at a time)
models <- vector(mode="list", length=3)

names(models)[1] = "Tree" 
models[[1]] = rpart(lettr~., data=data)

names(models)[2] = "Forest" 
set.seed(123)
models[[2]] = randomForest(lettr~.,data=data, importance=TRUE, proximity=TRUE)

# Fit multinomial logit model
names(models)[3] = "Multinomial" 
models[[3]] = vglm(lettr~., multinomial(), data=data)

models
}
```

# Prediction Using Models given data
```{r}
Prediction = function(models, data)
{
  outpred <- vector(mode="list", length=3)
  names(outpred)[1] = "Tree" 
  names(outpred)[2] = "Forest" 
  names(outpred)[3] = "Multinomial" 
  outpred$Multinomial=predict(models$Multinomial,type="response",newdata=data)
  outpred$Tree=predict(models$Tree,newdata=data)
  outpred$Forest=predict(models$Forest,newdata=data,type="prob")
  outpred
}
```

#Calculate Prediction Interval Helper
```{r}
CategoryPredIntervalHelper = function(data, letters, prediction)
{
  predint <- vector(mode="list", length=3)
  names(predint)[1] = "Tree" 
  names(predint)[2] = "Forest" 
  names(predint)[3] = "Multinomial" 
  predint$Tree=CategoryPredInterval(outpred$Tree,letters)
  predint$Multinomial=CategoryPredInterval(outpred$Multinomial,letters)
  predint$Forest=CategoryPredInterval(outpred$Forest,letters)
  predint
}
```

# Calculate Prediction Interval
```{r pred-intervals}
CategoryPredInterval = function(ProbMatrix,labels)
{ ncases=nrow(ProbMatrix)
  pred50=rep(NA,ncases); pred80=rep(NA,ncases)
  for(i in 1:ncases)
  { p=ProbMatrix[i,]
    ip=order(p,decreasing=T)
    pOrdered=p[ip] # decreasing order
    labelsOrdered=labels[ip] # decreasing order
    G=cumsum(pOrdered) # cumulative sum from largest
    k1=min(which(G>=0.5))  # level1= 0.5
    k2=min(which(G>=0.8))  # level2= 0.8
    pred1=labelsOrdered[1:k1]; pred2=labelsOrdered[1:k2]
    pred50[i]=paste(pred1,collapse="")
    pred80[i]=paste(pred2,collapse="")
  }
  list(pred50=pred50, pred80=pred80)
}
```

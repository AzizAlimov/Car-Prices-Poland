holdoute = df[indices,]
models[[k]] = lm(price~mark_cat+year+mileage_cat+log_vol_engine+fuel+car_type+gdpc,data=traine, weights = 1/(traine$year)^2)
pred = predict(models[[k]],newdata=holdoute,interval="prediction",level=a, weights = 1/(traine$year)^2)
RSS = c(crossprod(models[[k]]$residuals))
MSE = RSS / length(models[[k]]$residuals)
x = intervalScore(pred, holdoute$price, a)
y= sqrt(MSE)
z = summary(models[[k]])$r.squared
perfmeas[k,1:4] = x$summary
perfmeas[k,5] = y
perfmeas[k,6] = z
year[[k]] = traine$year
}
avgperfmeas = apply(perfmeas,2,mean)
list(perfmeasbyfold=perfmeas, avgperfmeas=avgperfmeas, models= models, year= year, pred = pred)
}
intervalScore = function(predObj,actual,level) {
n = nrow(predObj)
alpha = 1-level
ilow = (actual<predObj[,2]) # overestimation
ihigh = (actual>predObj[,3]) # underestimation
sumlength = sum(predObj[,3]-predObj[,2]) # sum of lengths of prediction intervals
sumlow = sum(predObj[ilow,2]-actual[ilow])*2/alpha
sumhigh = sum(actual[ihigh]-predObj[ihigh,3])*2/alpha
avglength = sumlength/n
IS = (sumlength+sumlow+sumhigh)/n # average length + average under/over penalties
cover = mean(actual>= predObj[,2] & actual<=predObj[,3])
summ = c(level,avglength,IS,cover)
# summary with level, average length, interval score, coverage rate, r^2, rmse
imiss = which(ilow | ihigh)
list(summary=summ, imiss=imiss)
}
x = crossValidationCont(train,3,0.5,6)
y = crossValidationCont2(train,3,0.5,6)
View(y)
crossValidationCont2 = function(df,K,a,nperfmeas=6)
{ set.seed(123)
n = nrow(df)
nhold = round(n/K) # size of holdout set
iperm = sample(n)
perfmeas = matrix(0,K,nperfmeas)
models = vector(mode="list", length=3)
year = vector(mode="list", length=3)
pred = vector(mode="list", length=3)
for(k in 1:K)
{ indices = (((k-1)*nhold+1):(k*nhold))
if( k==K ) indices = (((k-1)*nhold+1):n)
indices = iperm[indices]
traine = df[-indices,]
holdoute = df[indices,]
models[[k]] = lm(price~mark_cat+year+mileage_cat+log_vol_engine+fuel+car_type+gdpc,data=traine, weights = 1/(traine$year)^2)
pred = predict(models[[k]],newdata=holdoute,interval="prediction",level=a, weights = 1/(traine$year)^2)
RSS = c(crossprod(models[[k]]$residuals))
MSE = RSS / length(models[[k]]$residuals)
x = intervalScore(pred, holdoute$price, a)
y= sqrt(MSE)
z = summary(models[[k]])$r.squared
perfmeas[k,1:4] = x$summary
perfmeas[k,5] = y
perfmeas[k,6] = z
year[k] = traine$year
pred[k] = pred
}
avgperfmeas = apply(perfmeas,2,mean)
list(perfmeasbyfold=perfmeas, avgperfmeas=avgperfmeas, models= models, year= year, pred = pred)
}
intervalScore = function(predObj,actual,level) {
n = nrow(predObj)
alpha = 1-level
ilow = (actual<predObj[,2]) # overestimation
ihigh = (actual>predObj[,3]) # underestimation
sumlength = sum(predObj[,3]-predObj[,2]) # sum of lengths of prediction intervals
sumlow = sum(predObj[ilow,2]-actual[ilow])*2/alpha
sumhigh = sum(actual[ihigh]-predObj[ihigh,3])*2/alpha
avglength = sumlength/n
IS = (sumlength+sumlow+sumhigh)/n # average length + average under/over penalties
cover = mean(actual>= predObj[,2] & actual<=predObj[,3])
summ = c(level,avglength,IS,cover)
# summary with level, average length, interval score, coverage rate, r^2, rmse
imiss = which(ilow | ihigh)
list(summary=summ, imiss=imiss)
}
x = crossValidationCont(train,3,0.5,6)
y = crossValidationCont2(train,3,0.5,6)
View(y)
View(y)
crossValidationCont = function(df,K,a,nperfmeas=6)
{ set.seed(123)
n = nrow(df)
nhold = round(n/K) # size of holdout set
iperm = sample(n)
perfmeas = matrix(0,K,nperfmeas)
models = vector(mode="list", length=3)
year = vector(mode="list", length=3)
for(k in 1:K)
{ indices = (((k-1)*nhold+1):(k*nhold))
if( k==K ) indices = (((k-1)*nhold+1):n)
indices = iperm[indices]
traine = df[-indices,]
holdoute = df[indices,]
models[[k]] = lm(price~mark_cat+year+mileage_cat+log_vol_engine+fuel+car_type+gdpc,data=traine)
pred = predict(models[[k]],newdata=holdoute,interval="prediction",level=a)
RSS = c(crossprod(models[[k]]$residuals))
MSE = RSS / length(models[[k]]$residuals)
x = intervalScore(pred, holdoute$price, a)
y= sqrt(MSE)
z = summary(models[[k]])$r.squared
perfmeas[k,1:4] = x$summary
perfmeas[k,5] = y
perfmeas[k,6] = z
year[[k]] = traine$year
}
avgperfmeas = apply(perfmeas,2,mean)
list(perfmeasbyfold=perfmeas, avgperfmeas=avgperfmeas, models= models, year= year)
}
crossValidationCont2 = function(df,K,a,nperfmeas=6)
{ set.seed(123)
n = nrow(df)
nhold = round(n/K) # size of holdout set
iperm = sample(n)
perfmeas = matrix(0,K,nperfmeas)
models = vector(mode="list", length=3)
year = vector(mode="list", length=3)
predi = vector(mode="list", length=3)
for(k in 1:K)
{ indices = (((k-1)*nhold+1):(k*nhold))
if( k==K ) indices = (((k-1)*nhold+1):n)
indices = iperm[indices]
traine = df[-indices,]
holdoute = df[indices,]
models[[k]] = lm(price~mark_cat+year+mileage_cat+log_vol_engine+fuel+car_type+gdpc,data=traine, weights = 1/(traine$year)^2)
pred = predict(models[[k]],newdata=holdoute,interval="prediction",level=a, weights = 1/(traine$year)^2)
RSS = c(crossprod(models[[k]]$residuals))
MSE = RSS / length(models[[k]]$residuals)
x = intervalScore(pred, holdoute$price, a)
y= sqrt(MSE)
z = summary(models[[k]])$r.squared
perfmeas[k,1:4] = x$summary
perfmeas[k,5] = y
perfmeas[k,6] = z
year[k] = traine$year
predi[k] = pred
}
avgperfmeas = apply(perfmeas,2,mean)
list(perfmeasbyfold=perfmeas, avgperfmeas=avgperfmeas, models= models, year= year, pred = predi)
}
View(y)
y[["pred"]]
crossValidationCont2 = function(df,K,a,nperfmeas=6)
{ set.seed(123)
n = nrow(df)
nhold = round(n/K) # size of holdout set
iperm = sample(n)
perfmeas = matrix(0,K,nperfmeas)
models = vector(mode="list", length=3)
year = vector(mode="list", length=3)
predi = vector(mode="list", length=3)
for(k in 1:K)
{ indices = (((k-1)*nhold+1):(k*nhold))
if( k==K ) indices = (((k-1)*nhold+1):n)
indices = iperm[indices]
traine = df[-indices,]
holdoute = df[indices,]
models[[k]] = lm(price~mark_cat+year+mileage_cat+log_vol_engine+fuel+car_type+gdpc,data=traine, weights = 1/(traine$year)^2)
pred = predict(models[[k]],newdata=holdoute,interval="prediction",level=a, weights = 1/(traine$year)^2)
RSS = c(crossprod(models[[k]]$residuals))
MSE = RSS / length(models[[k]]$residuals)
x = intervalScore(pred, holdoute$price, a)
y= sqrt(MSE)
z = summary(models[[k]])$r.squared
perfmeas[k,1:4] = x$summary
perfmeas[k,5] = y
perfmeas[k,6] = z
year[[k]] = traine$year
predi[[k]] = pred
}
avgperfmeas = apply(perfmeas,2,mean)
list(perfmeasbyfold=perfmeas, avgperfmeas=avgperfmeas, models= models, year= year, pred = predi)
}
intervalScore = function(predObj,actual,level) {
n = nrow(predObj)
alpha = 1-level
ilow = (actual<predObj[,2]) # overestimation
ihigh = (actual>predObj[,3]) # underestimation
sumlength = sum(predObj[,3]-predObj[,2]) # sum of lengths of prediction intervals
sumlow = sum(predObj[ilow,2]-actual[ilow])*2/alpha
sumhigh = sum(actual[ihigh]-predObj[ihigh,3])*2/alpha
avglength = sumlength/n
IS = (sumlength+sumlow+sumhigh)/n # average length + average under/over penalties
cover = mean(actual>= predObj[,2] & actual<=predObj[,3])
summ = c(level,avglength,IS,cover)
# summary with level, average length, interval score, coverage rate, r^2, rmse
imiss = which(ilow | ihigh)
list(summary=summ, imiss=imiss)
}
x = crossValidationCont(train,3,0.5,6)
y = crossValidationCont2(train,3,0.5,6)
View(y)
y$perfmeasbyfold
y[["models"]][[1]][["qr"]][["qr"]]
y$perfmeasbyfold
intervalScore = function(predObj,actual,level) {
n = nrow(predObj)
alpha = 1-level
ilow = (actual<predObj[,2]) # overestimation
ihigh = (actual>predObj[,3]) # underestimation
sumlength = sum(predObj[,3]-predObj[,2]) # sum of lengths of prediction intervals
sumlow = sum(predObj[ilow,2]-actual[ilow])*2/alpha
sumhigh = sum(actual[ihigh]-predObj[ihigh,3])*2/alpha
avglength = sumlength/n
IS = (sumlength+sumlow+sumhigh)/n # average length + average under/over penalties
cover = mean(actual>= predObj[,2] & actual<=predObj[,3])
summ = c(level,avglength,IS,cover)
# summary with level, average length, interval score, coverage rate, r^2, rmse
imiss = which(ilow | ihigh)
list(summary=summ, imiss=imiss)
}
x = crossValidationCont(train,3,0.5,6)
y = crossValidationCont2(train,3,0.5,6)
crossValidationCont2 = function(df,K,a,nperfmeas=6)
{ set.seed(123)
n = nrow(df)
nhold = round(n/K) # size of holdout set
iperm = sample(n)
perfmeas = matrix(0,K,nperfmeas)
models = vector(mode="list", length=3)
year = vector(mode="list", length=3)
predi = vector(mode="list", length=3)
for(k in 1:K)
{ indices = (((k-1)*nhold+1):(k*nhold))
if( k==K ) indices = (((k-1)*nhold+1):n)
indices = iperm[indices]
traine = df[-indices,]
holdoute = df[indices,]
models[[k]] = lm(price~mark_cat+year+mileage_cat+log_vol_engine+fuel+car_type+gdpc,data=traine, weights = 1/(traine$year)^2)
pred = predict(models[[k]],newdata=holdoute,interval="prediction",level=a, weights = 1/(traine$year)^2)
RSS = c(crossprod(models[[k]]$residuals))
MSE = RSS / length(models[[k]]$residuals)
x = intervalScore(pred, holdoute$price, a)
y= sqrt(MSE)
z = summary(models[[k]])$r.squared
perfmeas[k,1:4] = x$summary
perfmeas[k,5] = y
perfmeas[k,6] = z
year[[k]] = traine$year
predi[[k]] = pred
}
avgperfmeas = apply(perfmeas,2,mean)
list(perfmeasbyfold=perfmeas, avgperfmeas=avgperfmeas, models= models, year= year, pred = predi)
}
intervalScore = function(predObj,actual,level) {
n = nrow(predObj)
alpha = 1-level
ilow = (actual<predObj[,2]) # overestimation
ihigh = (actual>predObj[,3]) # underestimation
sumlength = sum(predObj[,3]-predObj[,2]) # sum of lengths of prediction intervals
sumlow = sum(predObj[ilow,2]-actual[ilow])*2/alpha
sumhigh = sum(actual[ihigh]-predObj[ihigh,3])*2/alpha
avglength = sumlength/n
IS = (sumlength+sumlow+sumhigh)/n # average length + average under/over penalties
cover = mean(actual>= predObj[,2] & actual<=predObj[,3])
summ = c(level,avglength,IS,cover)
# summary with level, average length, interval score, coverage rate, r^2, rmse
imiss = which(ilow | ihigh)
list(summary=summ, imiss=imiss)
}
x = crossValidationCont(train,3,0.5,6)
y = crossValidationCont2(train,3,0.5,6)
x$perfmeasbyfold
y$perfmeasbyfold
crossValidationCont2 = function(df,K,a,nperfmeas=6)
{ set.seed(123)
n = nrow(df)
nhold = round(n/K) # size of holdout set
iperm = sample(n)
perfmeas = matrix(0,K,nperfmeas)
models = vector(mode="list", length=3)
year = vector(mode="list", length=3)
predi = vector(mode="list", length=3)
pri = vector(mode="list", length=3)
for(k in 1:K)
{ indices = (((k-1)*nhold+1):(k*nhold))
if( k==K ) indices = (((k-1)*nhold+1):n)
indices = iperm[indices]
traine = df[-indices,]
holdoute = df[indices,]
models[[k]] = lm(price~mark_cat+year+mileage_cat+log_vol_engine+fuel+car_type+gdpc,data=traine, weights = 1/(traine$year)^2)
pred = predict(models[[k]],newdata=holdoute,interval="prediction",level=a, weights = 1/(traine$year)^2)
RSS = c(crossprod(models[[k]]$residuals))
MSE = RSS / length(models[[k]]$residuals)
x = intervalScore(pred, holdoute$price, a)
y= sqrt(MSE)
z = summary(models[[k]])$r.squared
perfmeas[k,1:4] = x$summary
perfmeas[k,5] = y
perfmeas[k,6] = z
year[[k]] = traine$year
predi[[k]] = pred
pri[[k]] = holdoute$price
}
avgperfmeas = apply(perfmeas,2,mean)
list(perfmeasbyfold=perfmeas, avgperfmeas=avgperfmeas, models= models, year= year, pred = predi, price = pri)
}
intervalScore = function(predObj,actual,level) {
n = nrow(predObj)
alpha = 1-level
ilow = (actual<predObj[,2]) # overestimation
ihigh = (actual>predObj[,3]) # underestimation
sumlength = sum(predObj[,3]-predObj[,2]) # sum of lengths of prediction intervals
sumlow = sum(predObj[ilow,2]-actual[ilow])*2/alpha
sumhigh = sum(actual[ihigh]-predObj[ihigh,3])*2/alpha
avglength = sumlength/n
IS = (sumlength+sumlow+sumhigh)/n # average length + average under/over penalties
cover = mean(actual>= predObj[,2] & actual<=predObj[,3])
summ = c(level,avglength,IS,cover)
# summary with level, average length, interval score, coverage rate, r^2, rmse
imiss = which(ilow | ihigh)
list(summary=summ, imiss=imiss)
}
x = crossValidationCont(train,3,0.5,6)
y = crossValidationCont2(train,3,0.5,6)
View(y)
intervalScore(y$pred[[1]], y$price[[1]], 0.5)
length(y$pred[[1]])
length(y$price[[1]])
crossValidationCont2 = function(df,K,a,nperfmeas=6)
{ set.seed(123)
n = nrow(df)
nhold = round(n/K) # size of holdout set
iperm = sample(n)
perfmeas = matrix(0,K,nperfmeas)
models = vector(mode="list", length=3)
year = vector(mode="list", length=3)
predi = vector(mode="list", length=3)
pri = vector(mode="list", length=3)
for(k in 1:K)
{ indices = (((k-1)*nhold+1):(k*nhold))
if( k==K ) indices = (((k-1)*nhold+1):n)
indices = iperm[indices]
traine = df[-indices,]
holdoute = df[indices,]
models[[k]] = lm(price~mark_cat+year+mileage_cat+log_vol_engine+fuel+car_type+gdpc,data=traine, weights = 1/(traine$year)^2)
pred = predict(models[[k]],newdata=holdoute,interval="prediction",level=a, weights = 1/(holdoute$year)^2)
RSS = c(crossprod(models[[k]]$residuals))
MSE = RSS / length(models[[k]]$residuals)
x = intervalScore(pred, holdoute$price, a)
y= sqrt(MSE)
z = summary(models[[k]])$r.squared
perfmeas[k,1:4] = x$summary
perfmeas[k,5] = y
perfmeas[k,6] = z
year[[k]] = traine$year
predi[[k]] = pred
pri[[k]] = holdoute$price
}
avgperfmeas = apply(perfmeas,2,mean)
list(perfmeasbyfold=perfmeas, avgperfmeas=avgperfmeas, models= models, year= year, pred = predi, price = pri)
}
intervalScore = function(predObj,actual,level) {
n = nrow(predObj)
alpha = 1-level
ilow = (actual<predObj[,2]) # overestimation
ihigh = (actual>predObj[,3]) # underestimation
sumlength = sum(predObj[,3]-predObj[,2]) # sum of lengths of prediction intervals
sumlow = sum(predObj[ilow,2]-actual[ilow])*2/alpha
sumhigh = sum(actual[ihigh]-predObj[ihigh,3])*2/alpha
avglength = sumlength/n
IS = (sumlength+sumlow+sumhigh)/n # average length + average under/over penalties
cover = mean(actual>= predObj[,2] & actual<=predObj[,3])
summ = c(level,avglength,IS,cover)
# summary with level, average length, interval score, coverage rate, r^2, rmse
imiss = which(ilow | ihigh)
list(summary=summ, imiss=imiss)
}
x = crossValidationCont(train,3,0.5,6)
y = crossValidationCont2(train,3,0.5,6)
y$perfmeasbyfold
y$avgperfmeas
y = crossValidationCont2(train,3,0.8,6)
y$perfmeasbyfold
y$perfmeasbyfold
y$avgperfmeas
plot(y$models[[1]]$fitted.values,y$models[[1]]$residuals)
plot(y$models[[1]]$fitted.values,y$models[[1]]$residuals,xlab="Fitted Values",ylab="Residuals", main="Fold 1")
plot(y$models[[2]]$fitted.values,y$models[[2]]$residuals,xlab="Fitted Values",ylab="Residuals", main="Fold 2")
plot(y$models[[3]]$fitted.values,y$models[[3]]$residuals,xlab="Fitted Values",ylab="Residuals", main="Fold 3")
x$models[[1]]$coefficients
ols_step_best_subset(model_normal_variables)
ols_step_best_subset(model_chosen_variables)
ols_step_best_subset(model_normal_variables)
ols_step_best_subset(y$models[[1]])
crossValidationCont(train,3,0.5,6)
knitr::opts_chunk$set(echo = TRUE)
library(mlbench)
library(randomForest)
library(party)
library(rpart)
library(rpart.plot)
library(leaps)
library(olsrr)
library(magrittr)
library(tibble)
crossValidationCont3 = function(df,K,a,nperfmeas=6)
{ set.seed(123)
n = nrow(df)
nhold = round(n/K) # size of holdout set
iperm = sample(n)
perfmeas = matrix(0,K,nperfmeas)
models = vector(mode="list", length=3)
year = vector(mode="list", length=3)
for(k in 1:K)
{ indices = (((k-1)*nhold+1):(k*nhold))
if( k==K ) indices = (((k-1)*nhold+1):n)
indices = iperm[indices]
traine = df[-indices,]
holdoute = df[indices,]
models[[k]] = lm(I(log(price))~mark_cat+year+mileage_cat+log_vol_engine+fuel+car_type,data=traine)
pred = predict(models[[k]],newdata=holdoute,interval="prediction",level=a)
pred = exp(pred)
RSS = c(crossprod(models[[k]]$residuals))
MSE = RSS / length(models[[k]]$residuals)
x = intervalScore(pred, holdoute$price, a)
y= sqrt(MSE)
z = summary(models[[k]])$r.squared
perfmeas[k,1:4] = x$summary
perfmeas[k,5] = y
perfmeas[k,6] = z
year[[k]] = traine$year
}
avgperfmeas = apply(perfmeas,2,mean)
list(perfmeasbyfold=perfmeas, avgperfmeas=avgperfmeas, models= models, year= year)
}
intervalScore = function(predObj,actual,level) {
n = nrow(predObj)
alpha = 1-level
ilow = (actual<predObj[,2]) # overestimation
ihigh = (actual>predObj[,3]) # underestimation
sumlength = sum(predObj[,3]-predObj[,2]) # sum of lengths of prediction intervals
sumlow = sum(predObj[ilow,2]-actual[ilow])*2/alpha
sumhigh = sum(actual[ihigh]-predObj[ihigh,3])*2/alpha
avglength = sumlength/n
IS = (sumlength+sumlow+sumhigh)/n # average length + average under/over penalties
cover = mean(actual>= predObj[,2] & actual<=predObj[,3])
summ = c(level,avglength,IS,cover)
# summary with level, average length, interval score, coverage rate, r^2, rmse
imiss = which(ilow | ihigh)
list(summary=summ, imiss=imiss)
}
x = crossValidationCont(train,3,0.5,6)
y = crossValidationCont2(train,3,0.5,6)
z = crossValidationCont3(train,3,0.5,6)
z$avgperfmeas
x$avgperfmeas
z$perfmeasbyfold
crossValidationCont3 = function(df,K,a,nperfmeas=6)
{ set.seed(123)
n = nrow(df)
nhold = round(n/K) # size of holdout set
iperm = sample(n)
perfmeas = matrix(0,K,nperfmeas)
models = vector(mode="list", length=3)
year = vector(mode="list", length=3)
predi = vector(mode="list", length=3)
pri = vector(mode="list", length=3)
for(k in 1:K)
{ indices = (((k-1)*nhold+1):(k*nhold))
if( k==K ) indices = (((k-1)*nhold+1):n)
indices = iperm[indices]
traine = df[-indices,]
holdoute = df[indices,]
models[[k]] = lm(I(log(price))~mark_cat+year+mileage_cat+log_vol_engine+fuel+car_type,data=traine)
pred = predict(models[[k]],newdata=holdoute,interval="prediction",level=a)
pred = exp(pred)
RSS = c(crossprod(models[[k]]$residuals))
MSE = RSS / length(models[[k]]$residuals)
x = intervalScore(pred, holdoute$price, a)
y= sqrt(MSE)
z = summary(models[[k]])$r.squared
perfmeas[k,1:4] = x$summary
perfmeas[k,5] = y
perfmeas[k,6] = z
year[[k]] = traine$year
predi[[k]] = pred
pri[[k]] = holdoute$price
}
avgperfmeas = apply(perfmeas,2,mean)
list(perfmeasbyfold=perfmeas, avgperfmeas=avgperfmeas, models= models, year= year, pred = predi)
}
intervalScore = function(predObj,actual,level) {
n = nrow(predObj)
alpha = 1-level
ilow = (actual<predObj[,2]) # overestimation
ihigh = (actual>predObj[,3]) # underestimation
sumlength = sum(predObj[,3]-predObj[,2]) # sum of lengths of prediction intervals
sumlow = sum(predObj[ilow,2]-actual[ilow])*2/alpha
sumhigh = sum(actual[ihigh]-predObj[ihigh,3])*2/alpha
avglength = sumlength/n
IS = (sumlength+sumlow+sumhigh)/n # average length + average under/over penalties
cover = mean(actual>= predObj[,2] & actual<=predObj[,3])
summ = c(level,avglength,IS,cover)
# summary with level, average length, interval score, coverage rate, r^2, rmse
imiss = which(ilow | ihigh)
list(summary=summ, imiss=imiss)
}
x = crossValidationCont(train,3,0.5,6)
y = crossValidationCont2(train,3,0.5,6)
z = crossValidationCont3(train,3,0.5,6)
plot(z$models[[1]]$fitted.values,z$models[[1]]$residuals)
plot(exp(z$models[[1]]$fitted.values),z$models[[1]]$residuals)
z$models[[1]]$residuals
z$avgperfmeas
x$avgperfmeas
